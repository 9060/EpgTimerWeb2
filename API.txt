EpgTimerWeb2 API仕様


1.呼び出し方、パラメータ、認証
 EpgTimerWeb2のAPIはHTTPとWebSocketで提供される。
 ・認証が必要な場合がある。
 ・大文字と小文字は区別される
 1.1 共通の認証
  1.1.1 ログイン
   URL: http://[サーバー]/doLogin
   パラメータ: user, pass
   POSTで送る。userはユーザー名、passはパスワード。
   成功すると301で「http://[サーバー]/」に飛ばされる。その時にCookieで名前「session」としてセッションキーが保管される。
   失敗すると301で「http://[サーバー]/login?error」に飛ばされる。
   WebSocketとHTTPでAPIを呼び出すとき、このCookieをつける。
   付けないとエラー
  1.1.2 ログアウト
   URL: http://[サーバー]/logout
   Cookieをつける
 1.2 WebSocketでの呼び出し方
  WebSocketのURI： ws://[サーバー]/ws
  ・エラー発生は「ERR [詳細]」が返る
  1.2.1 WebSocketでのAPI呼び出し
   ・API呼び出しは「[コールバック] [API呼び出し文字列]」を送信する。
   ・成功すると、「+OK[コールバック] [APIのレスポンス(JSON)]」が返る。
   ・「+OK」と「[コールバック]」の間にスペースはない。
   ・失敗時はエラー「No API」が返る。
 1.3 HTTPでの呼び出し方
  1.3.1 HTTPでのAPI呼び出し
 　呼び出すURI: http://[サーバー]/api/[API呼び出し文字列]/
   呼び出すURI(JSONP): http://[サーバー]/api/[API呼び出し文字列]/json/[コールバック]/
   ・JSONで結果が返る
 1.4 API呼び出し文字列
  形式: [API名]/[パラメータ]
  1.4.1 パラメータ
   一つのパラメータの形式(key,val): [Key]=[Val]
   一つのパラメータの形式(keyのみ): [Key]
   パラメータは「/」でつながる。
  例: GenerateEpgHTML/maxhour=12/epgcaponly/minsize=5
2 API一覧
 パラメータの型BOOLはそれがあるかで判断される。
 Ex. [usexxx:BOOL]はusexxxありでtrueなしでfalse
   つまり「.../usexxx/...」 => usexxx true
   「.../...」 => usexxx false
 TYPEはレスポンスの型、ResultInfoは
 --------
 class ResultInfo
 {
  bool result;
 }
 --------
 ↑これ
 PARAMはパラメータ、配列は「,」でつなぐ
 [PRESET]は
 --------
 class PRESET {
  //Example: savecaption/usepittari/priority=2 =>字幕保存、データカルーセルなし、優先度2
  bool savedata; //データカルーセル
  bool savecaption; //字幕
  bool usepittari; //ぴったり
  bool usetuijyuu; //追従
  byte suspendmode;
  int marginestart;
  int margineend;
  bool usepartial;
  //RecFolder, WritePlugIn, RecNameを「:」でつないで1Item
  //配列だが接続は「*」で行うので注意
  string[] partialdir;
  bool continuerec;
  int tuner;
  byte priority;
  byte recmode;
 }
 --------
 [SEARCH]は
 --------
 class SEARCH
 {
  //「*」で全て、配列
  string[] srvlist;
  //ContentNibbleLevel1,ContentNibbleLevel2,UserNibble1,UserNibble2を「.」でつなぐ(0.0.0.0のように)
  //配列OK
  string[] content;
  bool notcontent;
  bool useregex;
  bool aimai;
  // Title only
  bool tonly;
  // Keyword
  string kw;
  //FreeCA
  byte freeca;
  //時間指定
  //1つの形式: 「[startDayOfWeek].[startHour].[startMin]-[endDayOfWeek].[endHour].[endMin]」
  string[] date;
  bool notdate;
 }
 ・EnumReserve
   予約一覧を取得
   TYPE: ReserveData[]
 ・EnumService
   サービス一覧を取得
   TYPE: ChSet5Item[]
 ・EnumRecFileInfo
   録画一覧を取得
   TYPE: RecFileInfo[]
 ・GenerateEpgHTML
   EPGのHTMLを作る
   PARAM: [maxhour:INT],[unixstart:UNIXTIME],[services:ULONG[]],[minsize:INT],[epgcaponly:BOOL],[setbg:BOOL],[search:BOOL],[SEARCH]
    maxhour: 最大表示時間
    unixstart: 表示開始時間
    services: ServiceKeyの配列
    minsize: 一分あたりのサイズ(px)
    epgcaponly: ChSet5でEpgCapFlag == 1のみ表示
    setbg: ジャンルごとに色を付ける
    search==trueのみ[SEARCH]が必要
   TYPE: String
 ・EnumServiceEvent
   EPGデータを取得
   PARAM: [maxhour:INT],[key:INT],[unixstart:UNIXTIME]
    maxhour: 最大表示時間
    unixstart: 表示開始時間
    key: サービス指定(ServiceKey)
   TYPE: Dictionary<string, List<EventInfoItem>>
 ・GetEpgEvent
   EPGデータからひとつのイベントを取得
   PARAM: [key:INT],[o:INT],[t:INT],[s:INT],[e:INT]
          keyかo,t,s,eは必須
   o => ONID, t => TSID, s => SID, e => EventID
   TYPE: EventInfoItem
 ・EnumContentKindList1
   TYPE: Dictionary<UInt16, ContentKindInfo>
 ・EnumContentKindList2
   TYPE: Dictionary<UInt16, ContentKindInfo>
 ・EnumWritePlugInList
   TYPE: Dictionary<Int32, String>
 ・EnumRecNamePlugInList
   TYPE: Dictionary<Int32, String>
 ・EnumEpgAutoAddList
   自動予約一覧を取得
   TYPE: Dictionary<UInt32, EpgAutoAddData>
 ・EpgCapNow
   EPG取得を開始
 ・EpgReload
   EpgTimerSrvでEPGをリロード
 ・EnumTunerReserve
   チューナー別の予約一覧
   TYPE: List<TunerReserveInfo>
 ・GetSetting
   TYPE: Setting
 ・GetCommonManager
   TYPE: CommonManagerJson
 ・AddReserve
   予約追加
   PARAM: [PRESET],[onid:INT],[sid:INT],[tsid:INT],[eid:INT]
          onid,sid,tsid,eid(EventID)は必須
   TYPE: ResultInfo
 ・AddAutoReserve
   自動予約追加
   PARAM: [SEARCH],[PRESET],[overlap_check:BOOL],[overlap_day:INT]
   TYPE: EpgAutoAddData
 ・EnumPresets
   TYPE: Dictionary<UInt32, KeyValuePair<RecPresetItem, RecSettingData>>
 ・AddPreset
   PARAM: [name:STRING],[PRESET]
   TYPE: KeyValuePair<RecPresetItem, RecSettingData>
 ・EpgSearch
   EPG検索を行う
   PARAM: [SEARCH]
   TYPE: List<EventInfoItem>
 ・EnumEvents
   TYPE: List<NotifySrvInfoItem>
 ・GetContentColorTable
   TYPE: List<ContentColorItem>
 ・SetContentColorTable
   PARAM: [id:INT],[color:STRING]
                    ↑形式: #RRGGBB (つまりCSSのあれ)
          どちらも必須
   TYPE: ResultInfo
 ・RemoveReserve
   予約削除
   PARAM: [id:INT]
          idは必須
   TYPE: ResultInfo
 ・RemoveAutoReserve
   自動予約削除
   PARAM: [id:INT]
          idは必須
   TYPE: ResultInfo
 ・RemoveManualReserve
   マニュアル予約削除
   PARAM: [id:INT]
          idは必須
   TYPE: ResultInfo
 ・RemoveRecFile
   録画データ削除
   PARAM: [id:INT]
          idは必須
   TYPE: ResultInfo
 ・UpdateReserve
   予約更新
   PARAM: [id:INT],[PRESET]
   TYPE: ResultInfo
 ・Hello
   (´・ω・`)
   TYPE: VersionInfo
